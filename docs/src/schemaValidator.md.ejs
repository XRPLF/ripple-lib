## schemaValidator

Unlike the rest of the ripple-lib API, schemaValidator is a static object on RippleAPI. It provides utility methods that do not use a server.

## schemaValidate

`RippleAPI.schemaValidator.schemaValidate(schemaName: string, object: any): void`

This method checks an object for conformance to a specified schema. It does not return anything, but will throw a `ValidationError` if the object does not conform to the schema.

### Example

```javascript
RippleAPI.schemaValidator.schemaValidate('sign', {
    signedTransaction: '12000322800000002400000017201B0086955368400000000000000C732102F89EAEC7667B30F33D0687BBA86C3FE2A08CCA40A9186C5BDE2DAA6FA97A37D874473045022100BDE09A1F6670403F341C21A77CF35BA47E45CDE974096E1AA5FC39811D8269E702203D60291B9A27F1DCABA9CF5DED307B4F23223E0B6F156991DB601DFB9C41CE1C770A726970706C652E636F6D81145E7B112523F68D2F5E879DB4EAC51C6698A69304',
    id: '02ACE87F1996E3A23690A5BB7F1774BF71CCBA68F79805831B42ABAD5913D6F4'
})
```

```json
undefined
```

If the object is valid (conforms to the schema), nothing is returned. Otherwise, `schemaValidate` throws an error:

```javascript
RippleAPI.schemaValidator.schemaValidate('sign', {
    signedTransaction: '12000322800000002400000017201B0086955368400000000000000C732102F89EAEC7667B30F33D0687BBA86C3FE2A08CCA40A9186C5BDE2DAA6FA97A37D874473045022100BDE09A1F6670403F341C21A77CF35BA47E45CDE974096E1AA5FC39811D8269E702203D60291B9A27F1DCABA9CF5DED307B4F23223E0B6F156991DB601DFB9C41CE1C770A726970706C652E636F6D81145E7B112523F68D2F5E879DB4EAC51C6698A69304',
    id: '123'
})
```

```
[ValidationError(instance.id does not match pattern "^[A-F0-9]{64}$")]
```

## isValidAddress

`RippleAPI.schemaValidator.isValidAddress(address: string): boolean`

This method checks an address for validity. It does this by attempting to decode the address. If decoding succeeds, this method returns `true`. Otherwise, it returns `false`.

### Example

```javascript
RippleAPI.schemaValidator.isValidAddress('rDTXLQ7ZKZVKz33zJbHjgVShjsBnqMBhmN');
```

```json
true
```

## isValidSecret

`RippleAPI.schemaValidator.isValidSecret(secret: string): boolean`

This method checks a secret for validity. It does this by attempting to decode the secret. If decoding succeeds, this method returns `true`. Otherwise, it returns `false`.

### Example

```javascript
RippleAPI.schemaValidator.isValidSecret('snoPBrXtMeMyMHUVTgbuqAfg1SUTb');
```

```json
true
```

Warning: Do not use the above secret, which is shown here as an example only.

## deriveKeypair

```
RippleAPI.schemaValidator.deriveKeypair(secret: string): {
    privateKey: string,
    publicKey: string
}
```

This method derives a private key and public key from a given secret.

### Example

```javascript
RippleAPI.schemaValidator.deriveKeypair('snoPBrXtMeMyMHUVTgbuqAfg1SUTb');
```

```json
{
    "privateKey": "001ACAAEDECE405B2A958212629E16F2EB46B153EEE94CDD350FDEFF52795525B7",
    "publicKey": "0330E7FC9D56BB25D6893BA3F317AE5BCF33B3291BD63DB32654A313222F7FD020"
}
```

Warning: Do not use the above secret, which is shown here as an example only.

## deriveAddress

```
RippleAPI.schemaValidator.deriveAddress(publicKeyHex: string): string
```

This method derives an address from the given public key. The public key should be provided in hex format.

### Example

```javascript
RippleAPI.schemaValidator.deriveAddress('0330E7FC9D56BB25D6893BA3F317AE5BCF33B3291BD63DB32654A313222F7FD020');
```

```json
"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh"
```
