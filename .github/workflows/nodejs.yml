# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [main, 1.x]
  pull_request:
  workflow_dispatch:

jobs:
  build-and-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup npm version 7
        run: |
          npm i -g npm@7 --registry=https://registry.npmjs.org

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-deps-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ matrix.node-version }}-
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - run: npm run build
      - run: npm run lint

  unit:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup npm version 7
        run: |
          npm i -g npm@7 --registry=https://registry.npmjs.org

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-deps-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ matrix.node-version }}-
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - run: npm run build
      - run: npm test

  integration:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    # services:
    #   rippled:
    #     image: xrpllabsofficial/xrpld:latest
    #     ports:
    #       - 6006:6006
    #     options: -v "${{ github.workspace }}/rippled/":"/config/" --health-cmd="wget localhost:6006 || exit 1" --health-interval=5s --health-retries=10 --health-timeout=2s
    #     env: { ENV_ARGS: "-a --start" }

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      #     /usr/bin/docker create --name rippled-service --label rippled-container --network ${{ job.container.network }} --network-alias rippled -p 6006:6006 -v "${{ github.workspace }}/ci-config/":"/config/" --health-cmd="wget localhost:6006 || exit 1" --health-interval=5s --health-retries=10 --health-timeout=2s -e "ENV_ARGS=-a --start" -e GITHUB_ACTIONS=true -e CI=true xrpllabsofficial/xrpld:latest

      - uses: addnab/docker-run-action@v3
        with:
          image: xrpllabsofficial/xrpld:latest
          options: --network-alias rippled -p 6006:6006 -v "${{ github.workspace }}/ci-config/":"/config/"
          run: |
            echo "Started docker container"


      # - name: start rippled service
      #   run: |
      #     /usr/bin/docker version --format '{{.Server.APIVersion}}'
      #     /usr/bin/docker version --format '{{.Client.APIVersion}}' 
      
      # - name: Clean up old network
      #   run: |
      #     /usr/bin/docker ps --all --quiet --no-trunc --filter "label=rippled-container"
      #     /usr/bin/docker network prune --force --filter "label=rippled-container"
        
      # - name: Create network
      #   run: |
      #     /usr/bin/docker network create --label rippled-container rippled_container_network
        
      # - name: Start rippled service container
      #   run: |
      #     /usr/bin/docker pull xrpllabsofficial/xrpld:latest
      #     /usr/bin/docker create --name rippled-service --label rippled-container --network ${{ job.container.network }} --network-alias rippled -p 6006:6006 -v "${{ github.workspace }}/ci-config/":"/config/" --health-cmd="wget localhost:6006 || exit 1" --health-interval=5s --health-retries=10 --health-timeout=2s -e "ENV_ARGS=-a --start" -e GITHUB_ACTIONS=true -e CI=true xrpllabsofficial/xrpld:latest
      #     /usr/bin/docker start rippled-service
        
      # - name: Display data about service
      #   run: |
      #     /usr/bin/docker ps --all --filter id=rippled-service --filter status=running --no-trunc --format "{{.ID}} {{.Status}}"
      #     /usr/bin/docker port rippled-service

      - name: Setup npm version 7
        run: |
          npm i -g npm@7 --registry=https://registry.npmjs.org

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-deps-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ matrix.node-version }}-
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - run: npm run build
      - run: npm run test:integration
        env:
          HOST: localhost
          PORT: ${{ job.services.rippled.ports['6006'] }}

  browser:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [14.x] # This just needs to be compatible w/ puppeteer

    services:
      rippled:
        image: xrpllabsofficial/xrpld:latest
        ports:
          - 6006:6006
        options: -v "${{ github.workspace }}/rippled/":"/config/" --health-cmd="wget localhost:6006 || exit 1" --health-interval=5s --health-retries=10 --health-timeout=2s
        env: { ENV_ARGS: "-a --start" }

    steps:

      - name: ls
        run: |
          ls -a

      - name: pwd
        run: |
          pwd

      - name: cat file
        run: |
          cat ${{ github.workspace }}/ci-config/rippled.cfg

      - name: Setup npm version 7
        run: |
          npm i -g npm@7 --registry=https://registry.npmjs.org

      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-deps-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ matrix.node-version }}-
            ${{ runner.os }}-deps-

      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - run: npm run build
      - run: npm run test:browser
